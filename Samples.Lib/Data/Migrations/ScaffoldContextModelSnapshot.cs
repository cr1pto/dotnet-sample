// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Samples.Lib;

#nullable disable

namespace Samples.Lib.Data.Migrations
{
    [DbContext(typeof(ScaffoldContext))]
    partial class ScaffoldContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Samples.Lib.Entities.Attorney", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AttorneyType")
                        .HasMaxLength(20)
                        .HasColumnType("integer");

                    b.Property<string>("BarNumber")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid?>("CaseId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CaseId1")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FirmName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseId1");

                    b.ToTable("Attorneys");
                });

            modelBuilder.Entity("Samples.Lib.Entities.Case", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CaseNumber")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("DefendantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InmateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("JudgeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("DefendantId");

                    b.HasIndex("InmateId");

                    b.HasIndex("JudgeId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("Samples.Lib.Entities.Defendant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CaseNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Defendants");
                });

            modelBuilder.Entity("Samples.Lib.Entities.Inmate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ArraignmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ArrestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("SentencingDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Inmates");
                });

            modelBuilder.Entity("Samples.Lib.Entities.Judge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Judges");
                });

            modelBuilder.Entity("Samples.Lib.Entities.Juror", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CaseId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.ToTable("Jurors");
                });

            modelBuilder.Entity("Samples.Lib.Entities.Attorney", b =>
                {
                    b.HasOne("Samples.Lib.Entities.Case", null)
                        .WithMany("DefenseAttorneys")
                        .HasForeignKey("CaseId");

                    b.HasOne("Samples.Lib.Entities.Case", null)
                        .WithMany("DistrictAttorneys")
                        .HasForeignKey("CaseId1");
                });

            modelBuilder.Entity("Samples.Lib.Entities.Case", b =>
                {
                    b.HasOne("Samples.Lib.Entities.Defendant", "Defendant")
                        .WithMany()
                        .HasForeignKey("DefendantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Samples.Lib.Entities.Inmate", "Inmate")
                        .WithMany()
                        .HasForeignKey("InmateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Samples.Lib.Entities.Judge", "Judge")
                        .WithMany()
                        .HasForeignKey("JudgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Defendant");

                    b.Navigation("Inmate");

                    b.Navigation("Judge");
                });

            modelBuilder.Entity("Samples.Lib.Entities.Juror", b =>
                {
                    b.HasOne("Samples.Lib.Entities.Case", null)
                        .WithMany("Jury")
                        .HasForeignKey("CaseId");
                });

            modelBuilder.Entity("Samples.Lib.Entities.Case", b =>
                {
                    b.Navigation("DefenseAttorneys");

                    b.Navigation("DistrictAttorneys");

                    b.Navigation("Jury");
                });
#pragma warning restore 612, 618
        }
    }
}
